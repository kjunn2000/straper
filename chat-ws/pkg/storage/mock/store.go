// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kjunn2000/straper/chat-ws/pkg/storage/mysql (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account "github.com/kjunn2000/straper/chat-ws/pkg/domain/account"
	auth "github.com/kjunn2000/straper/chat-ws/pkg/domain/auth"
	chatting "github.com/kjunn2000/straper/chat-ws/pkg/domain/chatting"
	adding "github.com/kjunn2000/straper/chat-ws/pkg/domain/workspace/adding"
	editing "github.com/kjunn2000/straper/chat-ws/pkg/domain/workspace/editing"
	listing "github.com/kjunn2000/straper/chat-ws/pkg/domain/workspace/listing"
	mysql "github.com/kjunn2000/straper/chat-ws/pkg/storage/mysql"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddNewUserToWorkspace mocks base method.
func (m *MockStore) AddNewUserToWorkspace(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUserToWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUserToWorkspace indicates an expected call of AddNewUserToWorkspace.
func (mr *MockStoreMockRecorder) AddNewUserToWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUserToWorkspace", reflect.TypeOf((*MockStore)(nil).AddNewUserToWorkspace), arg0, arg1, arg2)
}

// AddUserToChannel mocks base method.
func (m *MockStore) AddUserToChannel(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToChannel indicates an expected call of AddUserToChannel.
func (mr *MockStoreMockRecorder) AddUserToChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChannel", reflect.TypeOf((*MockStore)(nil).AddUserToChannel), arg0, arg1, arg2)
}

// AddUserToWorkspace mocks base method.
func (m *MockStore) AddUserToWorkspace(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToWorkspace indicates an expected call of AddUserToWorkspace.
func (mr *MockStoreMockRecorder) AddUserToWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToWorkspace", reflect.TypeOf((*MockStore)(nil).AddUserToWorkspace), arg0, arg1, arg2)
}

// CreateChannel mocks base method.
func (m *MockStore) CreateChannel(arg0 context.Context, arg1 adding.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockStoreMockRecorder) CreateChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockStore)(nil).CreateChannel), arg0, arg1)
}

// CreateNewChannel mocks base method.
func (m *MockStore) CreateNewChannel(arg0 context.Context, arg1 adding.Channel, arg2 string) (adding.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(adding.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewChannel indicates an expected call of CreateNewChannel.
func (mr *MockStoreMockRecorder) CreateNewChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewChannel", reflect.TypeOf((*MockStore)(nil).CreateNewChannel), arg0, arg1, arg2)
}

// CreateNewWorkspace mocks base method.
func (m *MockStore) CreateNewWorkspace(arg0 context.Context, arg1 adding.Workspace, arg2 adding.Channel, arg3 string) (adding.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewWorkspace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(adding.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewWorkspace indicates an expected call of CreateNewWorkspace.
func (mr *MockStoreMockRecorder) CreateNewWorkspace(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewWorkspace", reflect.TypeOf((*MockStore)(nil).CreateNewWorkspace), arg0, arg1, arg2, arg3)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 account.CreateUserParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserAccessInfo mocks base method.
func (m *MockStore) CreateUserAccessInfo(arg0 context.Context, arg1 mysql.CreateUserAccessInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccessInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserAccessInfo indicates an expected call of CreateUserAccessInfo.
func (mr *MockStoreMockRecorder) CreateUserAccessInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccessInfo", reflect.TypeOf((*MockStore)(nil).CreateUserAccessInfo), arg0, arg1)
}

// CreateUserCredential mocks base method.
func (m *MockStore) CreateUserCredential(arg0 context.Context, arg1 mysql.CreateUserCredentialParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserCredential indicates an expected call of CreateUserCredential.
func (mr *MockStoreMockRecorder) CreateUserCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCredential", reflect.TypeOf((*MockStore)(nil).CreateUserCredential), arg0, arg1)
}

// CreateUserDetail mocks base method.
func (m *MockStore) CreateUserDetail(arg0 context.Context, arg1 mysql.CreateUserDetailParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserDetail indicates an expected call of CreateUserDetail.
func (mr *MockStoreMockRecorder) CreateUserDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDetail", reflect.TypeOf((*MockStore)(nil).CreateUserDetail), arg0, arg1)
}

// CreateWorkspace mocks base method.
func (m *MockStore) CreateWorkspace(arg0 context.Context, arg1 adding.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockStoreMockRecorder) CreateWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockStore)(nil).CreateWorkspace), arg0, arg1)
}

// DeleteChannel mocks base method.
func (m *MockStore) DeleteChannel(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockStoreMockRecorder) DeleteChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockStore)(nil).DeleteChannel), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteWorkspace mocks base method.
func (m *MockStore) DeleteWorkspace(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockStoreMockRecorder) DeleteWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockStore)(nil).DeleteWorkspace), arg0, arg1)
}

// GetChannelsByUserId mocks base method.
func (m *MockStore) GetChannelsByUserId(arg0 context.Context, arg1 string) ([]listing.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]listing.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelsByUserId indicates an expected call of GetChannelsByUserId.
func (mr *MockStoreMockRecorder) GetChannelsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsByUserId", reflect.TypeOf((*MockStore)(nil).GetChannelsByUserId), arg0, arg1)
}

// GetUserCredentialByUsername mocks base method.
func (m *MockStore) GetUserCredentialByUsername(arg0 context.Context, arg1 string) (auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentialByUsername", arg0, arg1)
	ret0, _ := ret[0].(auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredentialByUsername indicates an expected call of GetUserCredentialByUsername.
func (mr *MockStoreMockRecorder) GetUserCredentialByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentialByUsername", reflect.TypeOf((*MockStore)(nil).GetUserCredentialByUsername), arg0, arg1)
}

// GetUserDetailByUserId mocks base method.
func (m *MockStore) GetUserDetailByUserId(arg0 context.Context, arg1 string) (account.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailByUserId", arg0, arg1)
	ret0, _ := ret[0].(account.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetailByUserId indicates an expected call of GetUserDetailByUserId.
func (mr *MockStoreMockRecorder) GetUserDetailByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailByUserId", reflect.TypeOf((*MockStore)(nil).GetUserDetailByUserId), arg0, arg1)
}

// GetUserDetailByUsername mocks base method.
func (m *MockStore) GetUserDetailByUsername(arg0 context.Context, arg1 string) (account.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailByUsername", arg0, arg1)
	ret0, _ := ret[0].(account.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetailByUsername indicates an expected call of GetUserDetailByUsername.
func (mr *MockStoreMockRecorder) GetUserDetailByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailByUsername", reflect.TypeOf((*MockStore)(nil).GetUserDetailByUsername), arg0, arg1)
}

// GetUserListByChannelId mocks base method.
func (m *MockStore) GetUserListByChannelId(arg0 context.Context, arg1 string) ([]chatting.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListByChannelId", arg0, arg1)
	ret0, _ := ret[0].([]chatting.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListByChannelId indicates an expected call of GetUserListByChannelId.
func (mr *MockStoreMockRecorder) GetUserListByChannelId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListByChannelId", reflect.TypeOf((*MockStore)(nil).GetUserListByChannelId), arg0, arg1)
}

// GetWorkspaceByWorkspaceId mocks base method.
func (m *MockStore) GetWorkspaceByWorkspaceId(arg0 context.Context, arg1 string) (listing.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByWorkspaceId", arg0, arg1)
	ret0, _ := ret[0].(listing.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByWorkspaceId indicates an expected call of GetWorkspaceByWorkspaceId.
func (mr *MockStoreMockRecorder) GetWorkspaceByWorkspaceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByWorkspaceId", reflect.TypeOf((*MockStore)(nil).GetWorkspaceByWorkspaceId), arg0, arg1)
}

// GetWorkspacesByUserId mocks base method.
func (m *MockStore) GetWorkspacesByUserId(arg0 context.Context, arg1 string) ([]listing.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacesByUserId", arg0, arg1)
	ret0, _ := ret[0].([]listing.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacesByUserId indicates an expected call of GetWorkspacesByUserId.
func (mr *MockStoreMockRecorder) GetWorkspacesByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacesByUserId", reflect.TypeOf((*MockStore)(nil).GetWorkspacesByUserId), arg0, arg1)
}

// RemoveUserFromChannel mocks base method.
func (m *MockStore) RemoveUserFromChannel(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromChannel indicates an expected call of RemoveUserFromChannel.
func (mr *MockStoreMockRecorder) RemoveUserFromChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChannel", reflect.TypeOf((*MockStore)(nil).RemoveUserFromChannel), arg0, arg1, arg2)
}

// RemoveUserFromWorkspace mocks base method.
func (m *MockStore) RemoveUserFromWorkspace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromWorkspace indicates an expected call of RemoveUserFromWorkspace.
func (mr *MockStoreMockRecorder) RemoveUserFromWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromWorkspace", reflect.TypeOf((*MockStore)(nil).RemoveUserFromWorkspace), arg0, arg1, arg2)
}

// UpdateChannel mocks base method.
func (m *MockStore) UpdateChannel(arg0 context.Context, arg1 editing.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockStoreMockRecorder) UpdateChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockStore)(nil).UpdateChannel), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 account.UpdateUserParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateWorkspace mocks base method.
func (m *MockStore) UpdateWorkspace(arg0 context.Context, arg1 editing.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockStoreMockRecorder) UpdateWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockStore)(nil).UpdateWorkspace), arg0, arg1)
}
