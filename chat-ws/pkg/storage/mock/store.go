// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kjunn2000/straper/chat-ws/pkg/storage/mysql (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account "github.com/kjunn2000/straper/chat-ws/pkg/domain/account"
	adding "github.com/kjunn2000/straper/chat-ws/pkg/domain/adding"
	auth "github.com/kjunn2000/straper/chat-ws/pkg/domain/auth"
	chatting "github.com/kjunn2000/straper/chat-ws/pkg/domain/chatting"
	listing "github.com/kjunn2000/straper/chat-ws/pkg/domain/listing"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddUserToChannel mocks base method.
func (m *MockStore) AddUserToChannel(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToChannel indicates an expected call of AddUserToChannel.
func (mr *MockStoreMockRecorder) AddUserToChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChannel", reflect.TypeOf((*MockStore)(nil).AddUserToChannel), arg0, arg1)
}

// AddUserToWorkspace mocks base method.
func (m *MockStore) AddUserToWorkspace(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToWorkspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToWorkspace indicates an expected call of AddUserToWorkspace.
func (mr *MockStoreMockRecorder) AddUserToWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToWorkspace", reflect.TypeOf((*MockStore)(nil).AddUserToWorkspace), arg0, arg1)
}

// CheckUsernameExist mocks base method.
func (m *MockStore) CheckUsernameExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsernameExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsernameExist indicates an expected call of CheckUsernameExist.
func (mr *MockStoreMockRecorder) CheckUsernameExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsernameExist", reflect.TypeOf((*MockStore)(nil).CheckUsernameExist), arg0)
}

// CreateChannel mocks base method.
func (m *MockStore) CreateChannel(arg0 *adding.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockStoreMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockStore)(nil).CreateChannel), arg0)
}

// CreateNewChannel mocks base method.
func (m *MockStore) CreateNewChannel(arg0 adding.Channel, arg1 string) (adding.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewChannel", arg0, arg1)
	ret0, _ := ret[0].(adding.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewChannel indicates an expected call of CreateNewChannel.
func (mr *MockStoreMockRecorder) CreateNewChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewChannel", reflect.TypeOf((*MockStore)(nil).CreateNewChannel), arg0, arg1)
}

// CreateNewWorkspace mocks base method.
func (m *MockStore) CreateNewWorkspace(arg0 adding.Workspace, arg1 adding.Channel, arg2 string) (adding.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(adding.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewWorkspace indicates an expected call of CreateNewWorkspace.
func (mr *MockStoreMockRecorder) CreateNewWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewWorkspace", reflect.TypeOf((*MockStore)(nil).CreateNewWorkspace), arg0, arg1, arg2)
}

// CreateWorkspace mocks base method.
func (m *MockStore) CreateWorkspace(arg0 adding.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockStoreMockRecorder) CreateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockStore)(nil).CreateWorkspace), arg0)
}

// DeleteChannel mocks base method.
func (m *MockStore) DeleteChannel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockStoreMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockStore)(nil).DeleteChannel), arg0)
}

// DeleteWorkspace mocks base method.
func (m *MockStore) DeleteWorkspace(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockStoreMockRecorder) DeleteWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockStore)(nil).DeleteWorkspace), arg0)
}

// FindUserByUsername mocks base method.
func (m *MockStore) FindUserByUsername(arg0 string) (*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", arg0)
	ret0, _ := ret[0].(*auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockStoreMockRecorder) FindUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockStore)(nil).FindUserByUsername), arg0)
}

// GetAllChannelByUserAndWorkspaceId mocks base method.
func (m *MockStore) GetAllChannelByUserAndWorkspaceId(arg0, arg1 string) ([]listing.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChannelByUserAndWorkspaceId", arg0, arg1)
	ret0, _ := ret[0].([]listing.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChannelByUserAndWorkspaceId indicates an expected call of GetAllChannelByUserAndWorkspaceId.
func (mr *MockStoreMockRecorder) GetAllChannelByUserAndWorkspaceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChannelByUserAndWorkspaceId", reflect.TypeOf((*MockStore)(nil).GetAllChannelByUserAndWorkspaceId), arg0, arg1)
}

// GetAllChannelByWorkspaceId mocks base method.
func (m *MockStore) GetAllChannelByWorkspaceId(arg0 string) ([]listing.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChannelByWorkspaceId", arg0)
	ret0, _ := ret[0].([]listing.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChannelByWorkspaceId indicates an expected call of GetAllChannelByWorkspaceId.
func (mr *MockStoreMockRecorder) GetAllChannelByWorkspaceId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChannelByWorkspaceId", reflect.TypeOf((*MockStore)(nil).GetAllChannelByWorkspaceId), arg0)
}

// GetClientListByChannelId mocks base method.
func (m *MockStore) GetClientListByChannelId(arg0 string) ([]chatting.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientListByChannelId", arg0)
	ret0, _ := ret[0].([]chatting.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientListByChannelId indicates an expected call of GetClientListByChannelId.
func (mr *MockStoreMockRecorder) GetClientListByChannelId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientListByChannelId", reflect.TypeOf((*MockStore)(nil).GetClientListByChannelId), arg0)
}

// GetDefaultChannelByWorkspaceId mocks base method.
func (m *MockStore) GetDefaultChannelByWorkspaceId(arg0 string) (adding.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultChannelByWorkspaceId", arg0)
	ret0, _ := ret[0].(adding.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultChannelByWorkspaceId indicates an expected call of GetDefaultChannelByWorkspaceId.
func (mr *MockStoreMockRecorder) GetDefaultChannelByWorkspaceId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultChannelByWorkspaceId", reflect.TypeOf((*MockStore)(nil).GetDefaultChannelByWorkspaceId), arg0)
}

// GetWorkspaceByWorkspaceId mocks base method.
func (m *MockStore) GetWorkspaceByWorkspaceId(arg0 string) (listing.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByWorkspaceId", arg0)
	ret0, _ := ret[0].(listing.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByWorkspaceId indicates an expected call of GetWorkspaceByWorkspaceId.
func (mr *MockStoreMockRecorder) GetWorkspaceByWorkspaceId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByWorkspaceId", reflect.TypeOf((*MockStore)(nil).GetWorkspaceByWorkspaceId), arg0)
}

// GetWorkspacesByUserId mocks base method.
func (m *MockStore) GetWorkspacesByUserId(arg0 string) ([]listing.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacesByUserId", arg0)
	ret0, _ := ret[0].([]listing.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacesByUserId indicates an expected call of GetWorkspacesByUserId.
func (mr *MockStoreMockRecorder) GetWorkspacesByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacesByUserId", reflect.TypeOf((*MockStore)(nil).GetWorkspacesByUserId), arg0)
}

// RemoveUserFromChannelList mocks base method.
func (m *MockStore) RemoveUserFromChannelList(arg0 []string, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromChannelList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromChannelList indicates an expected call of RemoveUserFromChannelList.
func (mr *MockStoreMockRecorder) RemoveUserFromChannelList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChannelList", reflect.TypeOf((*MockStore)(nil).RemoveUserFromChannelList), arg0, arg1)
}

// RemoveUserFromWorkspace mocks base method.
func (m *MockStore) RemoveUserFromWorkspace(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromWorkspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromWorkspace indicates an expected call of RemoveUserFromWorkspace.
func (mr *MockStoreMockRecorder) RemoveUserFromWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromWorkspace", reflect.TypeOf((*MockStore)(nil).RemoveUserFromWorkspace), arg0, arg1)
}

// SaveUser mocks base method.
func (m *MockStore) SaveUser(arg0 *account.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockStoreMockRecorder) SaveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockStore)(nil).SaveUser), arg0)
}
